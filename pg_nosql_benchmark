#!/bin/bash

#################################################################################
# Copyright (c) 2013-2014, EnterpriseDB Corporation
# 
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#===============================================================================
#title           : pg_nosql_benchmark.
#description     : This script will help in benchmarking PostgreSQL (JSONB) and
#                : MongoDB (BSON).
#author          : Vibhor Kumar (vibhor.aim@gmail.com).
#date            : July 17, 2014
#version         : 2.0.1
#usage           : bash pg_nosql_benchmark
#notes           : Install Vim and Emacs to use this script.
#bash_version    : GNU bash, version 4.1.2(1)-release (x86_64-redhat-linux-gnu)
#===============================================================================

################################################################################
# set require variables.
################################################################################
DIRECTORY=$(dirname $0)
BASENAME=$(basename $0)

PGHOME="/usr/lib/postgresql/9.5/"
PGHOST="host"
PGPORT="5432"
PGUSER="test"
PGPASSWORD="'123456'"
PGDATABASE="benchmark"

PGBIN="/usr/lib/postgresql/9.5/bin/"

PGJPOHOME="/usr/lib/postgresql/9.5/"
PGJPOHOST="host"
PGJPOPORT="5432"
PGJPOUSER="test"
PGJPOPASSWORD="'123456'"
PGJPODATABASE="benchmark"

PGJPOBIN="/usr/lib/postgresql/9.5/bin/"

PGJSQUERYHOME="/usr/lib/postgresql/9.5/"
PGJSQUERYHOST="host"
PGJSQUERYPORT="5432"
PGJSQUERYUSER="test"
PGJSQUERYPASSWORD="'123456'"
PGJSQUERYDATABASE="benchmark"

PGJSQUERYBIN="/usr/lib/postgresql/9.5/bin/"

################################################################################
# set mysql variables.
################################################################################
MYSQLHOME="/usr"
MYSQLHOST="host"
MYSQLPORT="3306"
MYSQLUSER="test"
MYSQLPASSWORD="123456"
MYSQLDATABASE="benchmark"

MYSQLBIN="mysql"

################################################################################
# set mongo variables.
################################################################################
MONGO="/home/ubuntu/mongo/bin/mongo"
MONGOIMPORT="/home/ubuntu/mongo/bin/mongoimport"
MONGOHOST="host"
MONGOPORT="27017"
MONGOUSER="mongo"
MONGOPASSWORD="mongo"
MONGODBNAME="benchmark"

MONGONOWT="/home/ubuntu/mongo/bin/mongo"
MONGONOWTIMPORT="/home/ubuntu/mongo/bin/mongoimport"
MONGONOWTHOST="host"
MONGONOWTPORT="27017"
MONGONOWTUSER="mongo"
MONGONOWTPASSWORD="mongo"
MONGONOWTDBNAME="benchmark"

COLLECTION_NAME="json_tables"
SAMPLEJSON="sample.json"
PG_INSERTS="sample_pg_inserts.json"
PGJPO_INSERTS="sample_pg_inserts.json"
PGJSQUERY_INSERTS="sample_pg_inserts.json"
MYSQL_INSERTS="sample_mysql_inserts.json"
MONGO_INSERTS="sample_mongo_inserts.js"
MONGONOWT_INSERTS="sample_mongo_inserts.js"

export PATH=$PGBIN:$PATH

################################################################################
# source library files
################################################################################
source ${DIRECTORY}/lib/common_func_lib.sh
source ${DIRECTORY}/lib/pg_func_lib.sh
source ${DIRECTORY}/lib/mysql_func_lib.sh
source ${DIRECTORY}/lib/mongo_func_lib.sh

################################################################################
# declare require arrays
################################################################################
declare -a json_rows=(1000000)

declare -a pg_collection_size_time
declare -a pg_index_size_time
declare -a pg_inserts_time
declare -a pg_select_time

# mysql specific arrays
declare -a mysql_collection_size_time
declare -a mysql_index_size_time
declare -a mysql_inserts_time
declare -a mysql_select_time

# mongo specific arrays
declare -a mongo_collection_size_time
declare -a mongo_index_size_time
declare -a mongo_inserts_time
declare -a mongo_select_time

################################################################################
# main function
################################################################################
version

process_log "PostgreSQL with GIN index Version $pg_version"
process_log "PostgreSQL with jsonb_path_ops index Version $pg_version_jpo"
process_log "PostgreSQL with jsquery Version $pg_version_jsquery"
process_log "Mysql Version $mysql_version"
process_log "MongoDB Version $mongodb_version"
process_log "MongoDB without WiredTiger Version $mongodb_version_nowt"


for (( indx=0 ; indx < ${#json_rows[@]} ; indx++ ))
do
   generate_json_rows "${json_rows[${indx}]}" \
                      "${SAMPLEJSON}"

   insert_maker
   remove_db
   create_db
   mk_json_collection
   create_index

   insert_time
   select_time
   update_time
   collection_size
   index_size

done


print_result "number of rows"     "${json_rows[@]}"
print_result "PG INSERT (ns)"     "${pg_inserts_time[@]}"
print_result "PG SELECT (ns)"     "${pg_select_time[@]}"
print_result "PG UPDATE (ns)"     "${pg_update_time[@]}"
print_result "PG TABLE SIZE (bytes)"    "${pg_collection_size_time[@]}"
print_result "PG INDEX SIZE (bytes)"    "${pg_index_size_time[@]}"

print_result "PGJPO INSERT (ns)"     "${pgjpo_inserts_time[@]}"
print_result "PGJPO SELECT (ns)"     "${pgjpo_select_time[@]}"
print_result "PGJPO UPDATE (ns)"     "${pgjpo_update_time[@]}"
print_result "PGJPO TABLE SIZE (bytes)"    "${pgjpo_collection_size_time[@]}"
print_result "PGJPO INDEX SIZE (bytes)"    "${pgjpo_index_size_time[@]}"

print_result "PGJSQUERY INSERT (ns)"     "${pgjsquery_inserts_time[@]}"
print_result "PGJSQUERY SELECT (ns)"     "${pgjsquery_select_time[@]}"
print_result "PGJSQUERY UPDATE (ns)"     "${pgjsquery_update_time[@]}"
print_result "PGJSQUERY TABLE SIZE (bytes)"    "${pgjsquery_collection_size_time[@]}"
print_result "PGJSQUERY INDEX SIZE (bytes)"    "${pgjsquery_index_size_time[@]}"

print_result "MYSQL INSERT (ns)"     "${mysql_inserts_time[@]}"
print_result "MYSQL SELECT (ns)"     "${mysql_select_time[@]}"
print_result "MYSQL UPDATE (ns)"     "${mysql_update_time[@]}"
print_result "MYSQL TABLE SIZE (bytes)"    "${mysql_collection_size_time[@]}"
print_result "MYSQL INDEX SIZE (bytes)"    "${mysql_index_size_time[@]}"

print_result "MONGO INSERT (ns)"  "${mongo_inserts_time[@]}"
print_result "MONGO SELECT (ns)"  "${mongo_select_time[@]}"
print_result "MONGO UPDATE (ns)"     "${mongo_update_time[@]}"
print_result "MONGO COLLECTION SIZE (bytes)" "${mongo_collection_size_time[@]}"
print_result "MONGO INDEX SIZE (bytes)" "${mongo_index_size_time[@]}"

print_result "MONGONOWT INSERT (ns)"  "${mongonowt_inserts_time[@]}"
print_result "MONGONOWT SELECT (ns)"  "${mongonowt_select_time[@]}"
print_result "MONGONOWT UPDATE (ns)"     "${mongonowt_update_time[@]}"
print_result "MONGONOWT COLLECTION SIZE (bytes)" "${mongonowt_collection_size_time[@]}"
print_result "MONGONOWT INDEX SIZE (bytes)" "${mongonowt_index_size_time[@]}"

save_results

rm -rf ${SAMPLEJSON}*
rm -rf ${PG_INSERTS}
rm -rf ${MONGO_INSERTS}
